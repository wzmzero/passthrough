// -*- C++ -*-
//
// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef MODELS_ODB_HXX
#define MODELS_ODB_HXX

#include <odb/version.hxx>

#if ODB_VERSION != 20500UL
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "models.h"

#include <memory>
#include <cstddef>
#include <string>
#include <utility>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/session.hxx>
#include <odb/cache-traits.hxx>
#include <odb/polymorphic-info.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>
#include <odb/polymorphic-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // TelemPoint
  //
  template <>
  struct class_traits< ::TelemPoint >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::TelemPoint >
  {
    public:
    typedef ::TelemPoint object_type;
    typedef ::TelemPoint* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = true;

    typedef ::TelemPoint root_type;
    typedef ::std::string discriminator_type;
    typedef polymorphic_map<object_type> map_type;
    typedef polymorphic_concrete_info<object_type> info_type;

    static const std::size_t depth = 1UL;

    typedef ::int64_t id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // MasterPoint
  //
  template <>
  struct class_traits< ::MasterPoint >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::MasterPoint >
  {
    public:
    typedef ::MasterPoint object_type;
    typedef ::MasterPoint* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = true;

    typedef ::TelemPoint root_type;
    typedef ::TelemPoint base_type;
    typedef object_traits<root_type>::discriminator_type discriminator_type;
    typedef polymorphic_concrete_info<root_type> info_type;

    static const std::size_t depth = 2UL;

    typedef object_traits< ::TelemPoint >::id_type id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      object_traits<root_type>::pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      root_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // SlavePoint
  //
  template <>
  struct class_traits< ::SlavePoint >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::SlavePoint >
  {
    public:
    typedef ::SlavePoint object_type;
    typedef ::SlavePoint* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::int64_t id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/sqlite/version.hxx>
#include <odb/sqlite/forward.hxx>
#include <odb/sqlite/binding.hxx>
#include <odb/sqlite/sqlite-types.hxx>
#include <odb/sqlite/query.hxx>

namespace odb
{
  // TelemPoint
  //
  template <typename A>
  struct query_columns< ::TelemPoint, id_sqlite, A >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::int64_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // typeid_
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    typeid__type_;

    static const typeid__type_ typeid_;

    // name
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    name_type_;

    static const name_type_ name;

    // register_address
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    register_address_type_;

    static const register_address_type_ register_address;

    // data_type
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::TelemDataType,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    data_type_type_;

    static const data_type_type_ data_type;

    // value_type
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::ValueType,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    value_type_type_;

    static const value_type_type_ value_type;

    // bool_value
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        bool,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    bool_value_type_;

    static const bool_value_type_ bool_value;

    // int_value
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::int32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    int_value_type_;

    static const int_value_type_ int_value;

    // float_value
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        float,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    float_value_type_;

    static const float_value_type_ float_value;

    // timestamp
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::time_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    timestamp_type_;

    static const timestamp_type_ timestamp;

    // unit
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    unit_type_;

    static const unit_type_ unit;

    // request_flag
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    request_flag_type_;

    static const request_flag_type_ request_flag;
  };

  template <typename A>
  const typename query_columns< ::TelemPoint, id_sqlite, A >::id_type_
  query_columns< ::TelemPoint, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::TelemPoint, id_sqlite, A >::typeid__type_
  query_columns< ::TelemPoint, id_sqlite, A >::
  typeid_ (A::table_name, "\"typeid\"", 0);

  template <typename A>
  const typename query_columns< ::TelemPoint, id_sqlite, A >::name_type_
  query_columns< ::TelemPoint, id_sqlite, A >::
  name (A::table_name, "\"name\"", 0);

  template <typename A>
  const typename query_columns< ::TelemPoint, id_sqlite, A >::register_address_type_
  query_columns< ::TelemPoint, id_sqlite, A >::
  register_address (A::table_name, "\"register_address\"", 0);

  template <typename A>
  const typename query_columns< ::TelemPoint, id_sqlite, A >::data_type_type_
  query_columns< ::TelemPoint, id_sqlite, A >::
  data_type (A::table_name, "\"data_type\"", 0);

  template <typename A>
  const typename query_columns< ::TelemPoint, id_sqlite, A >::value_type_type_
  query_columns< ::TelemPoint, id_sqlite, A >::
  value_type (A::table_name, "\"value_type\"", 0);

  template <typename A>
  const typename query_columns< ::TelemPoint, id_sqlite, A >::bool_value_type_
  query_columns< ::TelemPoint, id_sqlite, A >::
  bool_value (A::table_name, "\"bool_value\"", 0);

  template <typename A>
  const typename query_columns< ::TelemPoint, id_sqlite, A >::int_value_type_
  query_columns< ::TelemPoint, id_sqlite, A >::
  int_value (A::table_name, "\"int_value\"", 0);

  template <typename A>
  const typename query_columns< ::TelemPoint, id_sqlite, A >::float_value_type_
  query_columns< ::TelemPoint, id_sqlite, A >::
  float_value (A::table_name, "\"float_value\"", 0);

  template <typename A>
  const typename query_columns< ::TelemPoint, id_sqlite, A >::timestamp_type_
  query_columns< ::TelemPoint, id_sqlite, A >::
  timestamp (A::table_name, "\"timestamp\"", 0);

  template <typename A>
  const typename query_columns< ::TelemPoint, id_sqlite, A >::unit_type_
  query_columns< ::TelemPoint, id_sqlite, A >::
  unit (A::table_name, "\"unit\"", 0);

  template <typename A>
  const typename query_columns< ::TelemPoint, id_sqlite, A >::request_flag_type_
  query_columns< ::TelemPoint, id_sqlite, A >::
  request_flag (A::table_name, "\"request_flag\"", 0);

  template <typename A>
  struct pointer_query_columns< ::TelemPoint, id_sqlite, A >:
    query_columns< ::TelemPoint, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::TelemPoint, id_sqlite >:
    public access::object_traits< ::TelemPoint >
  {
    public:
    typedef polymorphic_entry<object_type, id_sqlite> entry_type;
    typedef object_traits_impl<root_type, id_sqlite> root_traits;

    struct discriminator_image_type
    {
      details::buffer discriminator_value;
      std::size_t discriminator_size;
      bool discriminator_null;

      std::size_t version;
    };

    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    static map_type* map;
    static const info_type info;

    struct image_type
    {
      // id
      //
      long long id_value;
      bool id_null;

      // typeid_
      //
      details::buffer typeid_value;
      std::size_t typeid_size;
      bool typeid_null;

      // name
      //
      details::buffer name_value;
      std::size_t name_size;
      bool name_null;

      // register_address
      //
      details::buffer register_address_value;
      std::size_t register_address_size;
      bool register_address_null;

      // data_type
      //
      long long data_type_value;
      bool data_type_null;

      // value_type
      //
      long long value_type_value;
      bool value_type_null;

      // bool_value
      //
      long long bool_value_value;
      bool bool_value_null;

      // int_value
      //
      long long int_value_value;
      bool int_value_null;

      // float_value
      //
      double float_value_value;
      bool float_value_null;

      // timestamp
      //
      long long timestamp_value;
      bool timestamp_null;

      // unit
      //
      details::buffer unit_value;
      std::size_t unit_size;
      bool unit_null;

      // request_flag
      //
      long long request_flag_value;
      bool request_flag_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static discriminator_type
    discriminator (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef
    sqlite::polymorphic_root_object_statements<object_type>
    statements_type;

    typedef statements_type root_statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 12UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 1UL;
    static const std::size_t managed_optimistic_column_count = 0UL;
    static const std::size_t discriminator_column_count = 1UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char find_discriminator_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&, bool top = true, bool dyn = true);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&, bool dyn = true);

    static bool
    reload (database&, object_type&, bool dyn = true);

    static void
    update (database&, const object_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const id_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const object_type&, bool top = true, bool dyn = true);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);

    static void
    discriminator_ (statements_type&,
                    const id_type&,
                    discriminator_type*);
  };

  template <>
  class access::object_traits_impl< ::TelemPoint, id_common >:
    public access::object_traits_impl< ::TelemPoint, id_sqlite >
  {
  };

  // MasterPoint
  //
  template <typename A>
  struct query_columns< ::MasterPoint, id_sqlite, A >:
    query_columns< ::TelemPoint, id_sqlite, typename A::base_traits >
  {
    // TelemPoint
    //
    typedef query_columns< ::TelemPoint, id_sqlite, typename A::base_traits > TelemPoint;

    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::int64_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // rw_flag
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    rw_flag_type_;

    static const rw_flag_type_ rw_flag;

    // return_flag
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    return_flag_type_;

    static const return_flag_type_ return_flag;
  };

  template <typename A>
  const typename query_columns< ::MasterPoint, id_sqlite, A >::id_type_
  query_columns< ::MasterPoint, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::MasterPoint, id_sqlite, A >::rw_flag_type_
  query_columns< ::MasterPoint, id_sqlite, A >::
  rw_flag (A::table_name, "\"rw_flag\"", 0);

  template <typename A>
  const typename query_columns< ::MasterPoint, id_sqlite, A >::return_flag_type_
  query_columns< ::MasterPoint, id_sqlite, A >::
  return_flag (A::table_name, "\"return_flag\"", 0);

  template <typename A>
  struct pointer_query_columns< ::MasterPoint, id_sqlite, A >:
    query_columns< ::MasterPoint, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::MasterPoint, id_sqlite >:
    public access::object_traits< ::MasterPoint >
  {
    public:
    typedef polymorphic_entry<object_type, id_sqlite> entry_type;
    typedef object_traits_impl<root_type, id_sqlite> root_traits;
    typedef object_traits_impl<base_type, id_sqlite> base_traits;

    typedef root_traits::id_image_type id_image_type;

    static const info_type info;

    struct image_type
    {
      base_traits::image_type* base;

      // id
      //
      long long id_value;
      bool id_null;

      // rw_flag
      //
      long long rw_flag_value;
      bool rw_flag_null;

      // return_flag
      //
      long long return_flag_value;
      bool return_flag_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static bool
    grow (image_type&,
          bool*,
          std::size_t = depth);

    static void
    bind (sqlite::bind*,
          const sqlite::bind* id,
          std::size_t id_size,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*,
          std::size_t = depth);

    static void
    init (id_image_type&, const id_type&);

    static bool
    check_version (const std::size_t*, const image_type&);

    static void
    update_version (std::size_t*, const image_type&, sqlite::binding*);

    typedef
    sqlite::polymorphic_derived_object_statements<object_type>
    statements_type;

    typedef
    sqlite::polymorphic_root_object_statements<root_type>
    root_statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 3UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char* const find_statements[depth];
    static const std::size_t find_column_counts[depth];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&, bool top = true, bool dyn = true);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&, bool dyn = true);

    static bool
    reload (database&, object_type&, bool dyn = true);

    static void
    update (database&, const object_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const id_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const object_type&, bool top = true, bool dyn = true);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*,
           std::size_t = depth);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload,
           std::size_t = depth);

    static void
    load_ (database&, root_type&, std::size_t);
  };

  template <>
  class access::object_traits_impl< ::MasterPoint, id_common >:
    public access::object_traits_impl< ::MasterPoint, id_sqlite >
  {
  };

  // SlavePoint
  //
  template <typename A>
  struct pointer_query_columns< ::SlavePoint, id_sqlite, A >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::int64_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // base
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::int64_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    base_type_;

    static const base_type_ base;
  };

  template <typename A>
  const typename pointer_query_columns< ::SlavePoint, id_sqlite, A >::id_type_
  pointer_query_columns< ::SlavePoint, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::SlavePoint, id_sqlite, A >::base_type_
  pointer_query_columns< ::SlavePoint, id_sqlite, A >::
  base (A::table_name, "\"base_id\"", 0);

  template <>
  class access::object_traits_impl< ::SlavePoint, id_sqlite >:
    public access::object_traits< ::SlavePoint >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      long long id_value;
      bool id_null;

      // base
      //
      long long base_value;
      bool base_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    struct base_tag;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 2UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::SlavePoint, id_common >:
    public access::object_traits_impl< ::SlavePoint, id_sqlite >
  {
  };

  // TelemPoint
  //
  // MasterPoint
  //
  // SlavePoint
  //
  template <>
  struct alias_traits<
    ::TelemPoint,
    id_sqlite,
    access::object_traits_impl< ::SlavePoint, id_sqlite >::base_tag>
  {
    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::SlavePoint, id_sqlite >
  {
    // base
    //
    typedef
    odb::alias_traits<
      ::TelemPoint,
      id_sqlite,
      access::object_traits_impl< ::SlavePoint, id_sqlite >::base_tag>
    base_alias_;
  };

  template <typename A>
  struct query_columns< ::SlavePoint, id_sqlite, A >:
    query_columns_base< ::SlavePoint, id_sqlite >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::int64_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // base
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::int64_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    base_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::TelemPoint,
        id_sqlite,
        base_alias_ > >
    base_pointer_type_;

    struct base_type_: base_pointer_type_, base_column_type_
    {
      base_type_ (const char* t, const char* c, const char* conv)
        : base_column_type_ (t, c, conv)
      {
      }
    };

    static const base_type_ base;
  };

  template <typename A>
  const typename query_columns< ::SlavePoint, id_sqlite, A >::id_type_
  query_columns< ::SlavePoint, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::SlavePoint, id_sqlite, A >::base_type_
  query_columns< ::SlavePoint, id_sqlite, A >::
  base (A::table_name, "\"base_id\"", 0);
}

#include "models-odb.ixx"

#include <odb/post.hxx>

#endif // MODELS_ODB_HXX
